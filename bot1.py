import telebot
from telebot import types
import sqlite3
from datetime import datetime
import os
import csv
from openai import OpenAI
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = OpenAI(
    api_key='sk-k5lFTaLbtMHtLjCINnkDRXiMpRumJkb0',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á
    base_url="https://api.proxyapi.ru/openai/v1",
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('7754190602:AAFvBqgVIikoskm_Xa5WVUBnw9KNwVY-Jqk')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMIN_IDS = [1200223081]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
order_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        c.execute('''CREATE TABLE IF NOT EXISTS users
                     (user_id INTEGER PRIMARY KEY, username TEXT, reg_date TEXT, orders_count INTEGER DEFAULT 0)''')

        # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        c.execute('''CREATE TABLE IF NOT EXISTS categories
                     (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)''')

        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
        c.execute('''CREATE TABLE IF NOT EXISTS products
                     (id INTEGER PRIMARY KEY AUTOINCREMENT, category_id INTEGER, name TEXT, description TEXT, photo TEXT,
                      FOREIGN KEY (category_id) REFERENCES categories (id))''')

        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        c.execute('''CREATE TABLE IF NOT EXISTS welcome_message
                     (id INTEGER PRIMARY KEY AUTOINCREMENT, message_text TEXT, photo_path TEXT)''')

        # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        c.execute('''CREATE TABLE IF NOT EXISTS questions
                     (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, username TEXT, question_text TEXT,
                      question_type TEXT, file_id TEXT, timestamp TEXT, status TEXT DEFAULT 'pending')''')

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        c.execute('''CREATE TABLE IF NOT EXISTS orders
                     (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, username TEXT, product_id INTEGER,
                      product_name TEXT, quantity INTEGER, address TEXT, status TEXT DEFAULT 'pending', timestamp TEXT)''')

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        c.execute("INSERT OR IGNORE INTO welcome_message (message_text, photo_path) VALUES (?, ?)",
                  ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!", "default_welcome.jpg"))

        conn.commit()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
def get_ai_response(prompt):
    try:
        with open("knowledge_base.txt", "r", encoding="utf-8") as f:
            knowledge_base = f.read()
    except FileNotFoundError:
        knowledge_base = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

    system_prompt = (
        "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞. –û—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ.\n"
        f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n{knowledge_base}"
    )

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä")
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    chat_id = message.chat.id

    try:
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO users (user_id, username, reg_date, orders_count) VALUES (?, ?, ?, ?)",
                  (user_id, username, datetime.now().strftime("%Y-%m-%d"), 0))
        
        c.execute("SELECT message_text, photo_path FROM welcome_message ORDER BY id DESC LIMIT 1")
        welcome_text, photo_path = c.fetchone()
        conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤ /start: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    finally:
        conn.close()

    inline_markup = types.InlineKeyboardMarkup()
    inline_markup.add(types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–º–∞–≥–∞–∑–∏–Ω", url="YOUR_SHOP_URL"))

    if os.path.exists(photo_path):
        try:
            with open(photo_path, 'rb') as photo:
                bot.send_message(chat_id, welcome_text, reply_markup=inline_markup)
                bot.send_photo(chat_id, photo)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            bot.send_message(chat_id, welcome_text, reply_markup=inline_markup)
    else:
        bot.send_message(chat_id, welcome_text + "\n(–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", reply_markup=inline_markup)

    main_menu(chat_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@bot.message_handler(commands=['admin'])
def handle_admin(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("üìä –í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º",
               "üì® –†–∞—Å—Å—ã–ª–∫–∞", "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å", "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
    bot.send_message(message.chat.id, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
@bot.message_handler(func=lambda message: message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
def handle_question_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å", "–í–æ–ø—Ä–æ—Å –ø–æ —Ç–æ–≤–∞—Ä—É", "–û—Ç–º–µ–Ω–∞")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_question_type)

def process_question_type(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        main_menu(message.chat.id)
        return

    question_type = message.text
    msg = bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    bot.register_next_step_handler(msg, lambda m: process_question_content(m, question_type))

def process_question_content(message, question_type):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    question_text = message.text
    chat_id = message.chat.id

    try:
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute("INSERT INTO questions (user_id, username, question_text, question_type, timestamp) VALUES (?, ?, ?, ?, ?)",
                  (user_id, username, question_text, question_type, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.")
        return
    finally:
        conn.close()

    ai_response = get_ai_response(question_text)
    bot.send_message(chat_id, ai_response)

    for admin_id in ADMIN_IDS:
        bot.send_message(admin_id, f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{username} (ID: {user_id}) [{question_type}]:\n{question_text}\n\n–û—Ç–≤–µ—Ç –ò–ò: {ai_response}")

    main_menu(chat_id)

# –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
@bot.message_handler(func=lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä")
def handle_show_categories(message):
    try:
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute("SELECT id, name FROM categories")
        categories = c.fetchall()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return
    finally:
        conn.close()

    if not categories:
        bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    markup = types.InlineKeyboardMarkup()
    for cat_id, cat_name in categories:
        markup.add(types.InlineKeyboardButton(cat_name, callback_data=f"cat_{cat_id}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        if call.data.startswith("cat_"):
            category_id = int(call.data.split("_")[1])
            conn = sqlite3.connect('shop.db')
            c = conn.cursor()
            c.execute("SELECT id, name, description, photo FROM products WHERE category_id = ?", (category_id,))
            products = c.fetchall()
            conn.close()

            if not products:
                bot.send_message(call.message.chat.id, "–¢–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç.")
                return

            product_id, name, desc, photo = products[0]
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{product_id}"))
            with open(photo, 'rb') as p:
                bot.send_photo(call.message.chat.id, p, caption=f"{name}\n{desc}", reply_markup=markup)
        elif call.data.startswith("order_"):
            handle_order_start(call)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –ò–ò
def handle_order_start(call):
    product_id = int(call.data.split("_")[1])
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    order_data[user_id] = {"product_id": product_id, "step": "ask_product_details"}

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    try:
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute("SELECT name FROM products WHERE id = ?", (product_id,))
        product_name = c.fetchone()[0]
        order_data[user_id]["product_name"] = product_name
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.")
        return
    finally:
        conn.close()

    # –ò–ò —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    ai_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å '{product_name}'. –°–ø—Ä–æ—Å–∏, —Å–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ –µ–º—É –Ω—É–∂–Ω–æ."
    ai_response = get_ai_response(ai_prompt)
    msg = bot.send_message(chat_id, ai_response)
    bot.register_next_step_handler(msg, process_product_quantity)

def process_product_quantity(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    if user_id not in order_data or order_data[user_id]["step"] != "ask_product_details":
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
        order_data[user_id]["quantity"] = quantity
        order_data[user_id]["step"] = "ask_delivery_details"
    except ValueError:
        bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, process_product_quantity)
        return

    # –ò–ò —É—Ç–æ—á–Ω—è–µ—Ç –∞–¥—Ä–µ—Å
    ai_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–∞–∑–∞–ª {order_data[user_id]['quantity']} —à—Ç. '{order_data[user_id]['product_name']}'. –£—Ç–æ—á–Ω–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏."
    ai_response = get_ai_response(ai_prompt)
    msg = bot.send_message(chat_id, ai_response)
    bot.register_next_step_handler(msg, process_delivery_address)

def process_delivery_address(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    if user_id not in order_data or order_data[user_id]["step"] != "ask_delivery_details":
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    order_data[user_id]["address"] = message.text.strip()
    order_data[user_id]["step"] = "confirm_order"

    # –ò–ò —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    order_summary = (
        f"–í–∞—à –∑–∞–∫–∞–∑:\n"
        f"–¢–æ–≤–∞—Ä: {order_data[user_id]['product_name']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order_data[user_id]['quantity']} —à—Ç.\n"
        f"–ê–¥—Ä–µ—Å: {order_data[user_id]['address']}\n"
        f"–°—É–º–º–∞: {order_data[user_id]['quantity'] * 100} —Ä—É–±."
    )
    ai_prompt = f"–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n{order_summary}\n–°–ø—Ä–æ—Å–∏, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ."
    ai_response = get_ai_response(ai_prompt)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    msg = bot.send_message(chat_id, ai_response, reply_markup=markup)
    bot.register_next_step_handler(msg, process_order_confirmation)

def process_order_confirmation(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    if user_id not in order_data or order_data[user_id]["step"] != "confirm_order":
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    if message.text.lower() == "–¥–∞":
        try:
            conn = sqlite3.connect('shop.db')
            c = conn.cursor()
            c.execute(
                "INSERT INTO orders (user_id, username, product_id, product_name, quantity, address, timestamp) "
                "VALUES (?, ?, ?, ?, ?, ?, ?)",
                (user_id, message.from_user.username or "Unknown", order_data[user_id]["product_id"],
                 order_data[user_id]["product_name"], order_data[user_id]["quantity"], order_data[user_id]["address"],
                 datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            )
            order_id = c.lastrowid
            c.execute("UPDATE users SET orders_count = orders_count + 1 WHERE user_id = ?", (user_id,))
            conn.commit()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
            return
        finally:
            conn.close()

        order_summary = (
            f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n"
            f"–û—Ç: @{message.from_user.username or 'Unknown'} (ID: {user_id})\n"
            f"–¢–æ–≤–∞—Ä: {order_data[user_id]['product_name']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order_data[user_id]['quantity']} —à—Ç.\n"
            f"–ê–¥—Ä–µ—Å: {order_data[user_id]['address']}"
        )
        for admin_id in ADMIN_IDS:
            bot.send_message(admin_id, order_summary)

        ai_prompt = "–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã."
        ai_response = get_ai_response(ai_prompt)
        bot.send_message(chat_id, ai_response)
        order_data[user_id]["step"] = "awaiting_payment"
        order_data[user_id]["order_id"] = order_id

    elif message.text.lower() == "–Ω–µ—Ç":
        bot.send_message(chat_id, "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        del order_data[user_id]
    else:
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        bot.register_next_step_handler(message, process_order_confirmation)

    main_menu(chat_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã
@bot.message_handler(func=lambda message: "–æ–ø–ª–∞—Ç–∏–ª" in message.text.lower())
def process_payment_confirmation(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    if user_id not in order_data or order_data[user_id]["step"] != "awaiting_payment":
        bot.send_message(chat_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
        return

    ai_prompt = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª, —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∏ —É–≤–µ–¥–æ–º—å –∞–¥–º–∏–Ω–∞."
    ai_response = get_ai_response(ai_prompt)
    bot.send_message(chat_id, ai_response)

    order_id = order_data[user_id]["order_id"]
    for admin_id in ADMIN_IDS:
        bot.send_message(admin_id, f"@{message.from_user.username or 'Unknown'} (ID: {user_id}) –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑ #{order_id}.")

    try:
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute("UPDATE orders SET status = 'awaiting_confirmation' WHERE id = ?", (order_id,))
        conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    finally:
        conn.close()

    del order_data[user_id]
    main_menu(chat_id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    init_db()
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
