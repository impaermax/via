import telebot
from telebot import types
import sqlite3
from datetime import datetime
import os
import csv
from openai import OpenAI


client = OpenAI(
    api_key='sk-k5lFTaLbtMHtLjCINnkDRXiMpRumJkb0',
    base_url="https://api.proxyapi.ru/openai/v1",
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('7754190602:AAFvBqgVIikoskm_Xa5WVUBnw9KNwVY-Jqk')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()

    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, username TEXT, reg_date TEXT, orders_count INTEGER)''')

    c.execute('''CREATE TABLE IF NOT EXISTS categories
                 (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)''')

    c.execute('''CREATE TABLE IF NOT EXISTS products
                 (id INTEGER PRIMARY KEY AUTOINCREMENT, 
                  category_id INTEGER,
                  name TEXT,
                  description TEXT,
                  photo TEXT,
                  FOREIGN KEY (category_id) REFERENCES categories (id))''')

    c.execute('''CREATE TABLE IF NOT EXISTS welcome_message
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  message_text TEXT,
                  photo_path TEXT)''')

    c.execute('''CREATE TABLE IF NOT EXISTS questions
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  username TEXT,
                  question_text TEXT,
                  question_type TEXT,
                  file_id TEXT,
                  timestamp TEXT,
                  status TEXT DEFAULT 'pending')''')

    c.execute('''CREATE TABLE IF NOT EXISTS orders
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  username TEXT,
                  product_id INTEGER,
                  product_name TEXT,
                  quantity INTEGER,
                  address TEXT,
                  status TEXT DEFAULT 'pending',
                  timestamp TEXT)''')

    c.execute("SELECT COUNT(*) FROM welcome_message")
    if c.fetchone()[0] == 0:
        c.execute("INSERT INTO welcome_message (message_text, photo_path) VALUES (?, ?)", 
                 ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!", "default_welcome.jpg"))

    conn.commit()
    conn.close()

init_db()

# –ê–¥–º–∏–Ω—Å–∫–∏–µ ID
ADMIN_IDS = [1200223081]

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username

    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, username, reg_date, orders_count) VALUES (?, ?, ?, ?)",
              (user_id, username, datetime.now().strftime("%Y-%m-%d"), 0))

    c.execute("SELECT message_text, photo_path FROM welcome_message ORDER BY id DESC LIMIT 1")
    welcome_data = c.fetchone()
    welcome_text = welcome_data[0]
    photo_path = welcome_data[1]

    conn.commit()
    conn.close()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    btn2 = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä")
    markup.add(btn1, btn2)

    inline_markup = types.InlineKeyboardMarkup()
    web_btn = types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤–µ–± –º–∞–≥–∞–∑–∏–Ω", url='YOUR_SHOP_URL')
    inline_markup.add(web_btn)

    if os.path.exists(photo_path):
        bot.send_photo(message.chat.id, 
                      open(photo_path, 'rb'),
                      caption=welcome_text,
                      reply_markup=markup)
    else:
        bot.send_message(message.chat.id, welcome_text, reply_markup=markup)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
@bot.message_handler(func=lambda message: message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
def ask_question(message):
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª/—Ñ–æ—Ç–æ")
    bot.register_next_step_handler(msg, process_question)

def process_question(message):
    user_id = message.from_user.id
    username = message.from_user.username

    conn = sqlite3.connect('shop.db')
    c = conn.cursor()

    if message.content_type == 'text':
        content_type = 'text'
        file_id = None
        content = message.text
    elif message.content_type == 'photo':
        content_type = 'photo'
        file_id = message.photo[-1].file_id
        content = message.caption or ''
    elif message.content_type == 'document':
        content_type = 'document'
        file_id = message.document.file_id
        content = message.caption or ''
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    c.execute("INSERT INTO questions (user_id, username, question_text, question_type, file_id, timestamp) VALUES (?, ?, ?, ?, ?, ?)",
             (user_id, username, content, content_type, file_id, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))

    conn.commit()
    conn.close()

    for admin_id in ADMIN_IDS:
        if content_type == 'text':
            bot.send_message(admin_id, f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{username} (ID: {user_id}):\n\n{content}")
        elif content_type == 'photo':
            bot.send_photo(admin_id, file_id, caption=f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{username} (ID: {user_id}):\n\n{content}")
        elif content_type == 'document':
            bot.send_document(admin_id, file_id, caption=f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{username} (ID: {user_id}):\n\n{content}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
@bot.message_handler(func=lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä")
def show_categories(message):
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("SELECT * FROM categories")
    categories = c.fetchall()
    conn.close()

    markup = types.InlineKeyboardMarkup()
    for category in categories:
        btn = types.InlineKeyboardButton(category[1], callback_data=f"cat_{category[0]}")
        markup.add(btn)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

# –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id in ADMIN_IDS:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton("üìä –í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        btn2 = types.KeyboardButton("üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º")
        btn3 = types.KeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞")
        btn4 = types.KeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        btn5 = types.KeyboardButton("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
        markup.add(btn1, btn2, btn3, btn4, btn5)
        bot.send_message(message.chat.id, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üìä –í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def export_users(message):
    if message.from_user.id in ADMIN_IDS:
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute("SELECT * FROM users")
        users = c.fetchall()
        conn.close()

        csv_filename = 'users_report.csv'
        with open(csv_filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['ID', 'Username', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'])
            for user in users:
                writer.writerow([user[0], user[1], user[2], user[3]])

        with open(csv_filename, 'rb') as f:
            bot.send_document(message.chat.id, f, caption="–í—ã–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        os.remove(csv_filename)

@bot.message_handler(func=lambda message: message.text == "üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º")
def manage_shop(message):
    if message.from_user.id in ADMIN_IDS:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        btn2 = types.KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        btn3 = types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
        btn4 = types.KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
        btn5 = types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
        btn6 = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
        markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
        bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
def add_category(message):
    if message.from_user.id in ADMIN_IDS:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        bot.register_next_step_handler(msg, save_category)

def save_category(message):
    if message.from_user.id in ADMIN_IDS:
        category_name = message.text
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute("INSERT INTO categories (name) VALUES (?)", (category_name,))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        manage_shop(message)

@bot.message_handler(func=lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
def delete_category(message):
    if message.from_user.id in ADMIN_IDS:
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute("SELECT * FROM categories")
        categories = c.fetchall()
        conn.close()

        if not categories:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            manage_shop(message)
            return

        markup = types.InlineKeyboardMarkup()
        for category in categories:
            markup.add(types.InlineKeyboardButton(category[1], callback_data=f"del_cat_{category[0]}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
def add_product_start(message):
    if message.from_user.id in ADMIN_IDS:
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute("SELECT * FROM categories")
        categories = c.fetchall()
        conn.close()

        if not categories:
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
            manage_shop(message)
            return

        markup = types.InlineKeyboardMarkup()
        for category in categories:
            markup.add(types.InlineKeyboardButton(category[1], callback_data=f"prod_cat_{category[0]}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
def delete_product_start(message):
    if message.from_user.id in ADMIN_IDS:
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute("SELECT * FROM categories")
        categories = c.fetchall()
        conn.close()

        if not categories:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏!")
            manage_shop(message)
            return

        markup = types.InlineKeyboardMarkup()
        for category in categories:
            markup.add(types.InlineKeyboardButton(category[1], callback_data=f"del_prod_cat_{category[0]}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
def edit_welcome_message(message):
    if message.from_user.id in ADMIN_IDS:
        msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)")
        bot.register_next_step_handler(msg, save_welcome_message)

def save_welcome_message(message):
    if message.from_user.id in ADMIN_IDS:
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()

        if message.content_type == 'photo':
            file_info = bot.get_file(message.photo[-1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            photo_path = f'welcome_photos/welcome_{datetime.now().strftime("%Y%m%d_%H%M%S")}.jpg'
            os.makedirs('welcome_photos', exist_ok=True)
            with open(photo_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            c.execute("INSERT INTO welcome_message (message_text, photo_path) VALUES (?, ?)",
                     (message.caption or "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!", photo_path))
        else:
            c.execute("INSERT INTO welcome_message (message_text, photo_path) VALUES (?, ?)",
                     (message.text, "default_welcome.jpg"))

        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        manage_shop(message)

@bot.message_handler(func=lambda message: message.text == "üì® –†–∞—Å—Å—ã–ª–∫–∞")
def broadcast_message(message):
    if message.from_user.id in ADMIN_IDS:
        msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ)")
        bot.register_next_step_handler(msg, process_broadcast)

def process_broadcast(message):
    if message.from_user.id in ADMIN_IDS:
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute("SELECT user_id FROM users")
        users = c.fetchall()
        conn.close()

        for user in users:
            try:
                if message.content_type == 'text':
                    bot.send_message(user[0], message.text)
                elif message.content_type == 'photo':
                    bot.send_photo(user[0], message.photo[-1].file_id, caption=message.caption)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
                continue

        bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        admin_panel(message)

@bot.message_handler(func=lambda message: message.text == "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
def show_pending_questions(message):
    if message.from_user.id in ADMIN_IDS:
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute("SELECT * FROM questions WHERE status = 'pending'")
        questions = c.fetchall()
        conn.close()

        if not questions:
            bot.send_message(message.chat.id, "–ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!")
            admin_panel(message)
            return

        markup = types.InlineKeyboardMarkup(row_width=1)
        for q in questions:
            btn_text = f"@{q[2]} ({q[6][:16]})"
            markup.add(types.InlineKeyboardButton(btn_text, callback_data=f"reply_to_{q[0]}"))
        bot.send_message(message.chat.id, "–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
def manage_orders(message):
    if message.from_user.id in ADMIN_IDS:
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute("SELECT * FROM orders WHERE status = 'pending'")
        orders = c.fetchall()
        conn.close()

        if not orders:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤!")
            admin_panel(message)
            return

        markup = types.InlineKeyboardMarkup(row_width=1)
        for order in orders:
            btn_text = f"–ó–∞–∫–∞–∑ #{order[0]} - @{order[2]} - {order[4]} ({order[5]} —à—Ç.)"
            markup.add(types.InlineKeyboardButton(btn_text, callback_data=f"manage_order_{order[0]}"))
        bot.send_message(message.chat.id, "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def back_to_admin_panel(message):
    if message.from_user.id in ADMIN_IDS:
        admin_panel(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    print(f"Callback received: {call.data}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    try:
        if call.data.startswith('cat_'):
            category_id = int(call.data.split('_')[1])
            show_product(call.message, category_id, 0)
        elif call.data.startswith('next_'):
            category_id, current_pos = map(int, call.data.split('_')[1:])
            show_product(call.message, category_id, current_pos + 1)
        elif call.data.startswith('prev_'):
            category_id, current_pos = map(int, call.data.split('_')[1:])
            show_product(call.message, category_id, current_pos - 1)
        elif call.data.startswith('order_'):
            parts = call.data.split('_')
            if len(parts) == 2:  # –ù–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞: order_{product_id}
                product_id = int(parts[1])
                start_order(call, product_id)
            elif parts[1] == 'qty':  # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: order_qty_{product_id}_{quantity}
                product_id, quantity = map(int, parts[2:])
                confirm_order_quantity(call.message, product_id, quantity)
            elif parts[1] == 'confirm':  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: order_confirm_{product_id}_{quantity}
                product_id, quantity = map(int, parts[2:])
                request_delivery_address(call.message, product_id, quantity)
        elif call.data.startswith('manage_order_'):
            order_id = int(call.data.split('_')[2])
            show_order_details(call.message, order_id)
        elif call.data.startswith('pay_'):
            order_id = int(call.data.split('_')[1])
            send_payment_details(call.message, order_id)
        elif call.data.startswith('prod_cat_'):
            category_id = int(call.data.split('_')[2])
            msg = bot.send_message(call.message.chat.id, 
                                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ\n–û–ø–∏—Å–∞–Ω–∏–µ\n–§–æ—Ç–æ")
            bot.register_next_step_handler(msg, lambda m: save_product(m, category_id))
        elif call.data.startswith('del_cat_'):
            category_id = int(call.data.split('_')[2])
            delete_category_confirm(call.message, category_id)
        elif call.data.startswith('del_prod_cat_'):
            category_id = int(call.data.split('_')[2])
            show_products_for_deletion(call.message, category_id)
        elif call.data.startswith('del_prod_'):
            product_id = int(call.data.split('_')[2])
            delete_product_confirm(call.message, product_id)
        elif call.data.startswith('reply_to_'):
            question_id = int(call.data.split('_')[2])
            start_reply_process(call.message, question_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ callback_handler: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def show_product(message, category_id, position):
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("SELECT * FROM products WHERE category_id = ?", (category_id,))
    products = c.fetchall()
    conn.close()

    if not products:
        bot.edit_message_text("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
                            message.chat.id,
                            message.message_id)
        return

    if position < 0:
        position = len(products) - 1
    elif position >= len(products):
        position = 0

    product = products[position]

    markup = types.InlineKeyboardMarkup(row_width=3)
    prev_btn = types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"prev_{category_id}_{position}")
    order_btn = types.InlineKeyboardButton(f"–ó–∞–∫–∞–∑–∞—Ç—å ({product[2]})", callback_data=f"order_{product[0]}")
    next_btn = types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"next_{category_id}_{position}")
    markup.add(prev_btn, order_btn, next_btn)

    with open(product[4], 'rb') as photo:
        bot.edit_message_media(
            media=types.InputMediaPhoto(photo, caption=f"{product[2]}\n\n{product[3]}"),
            chat_id=message.chat.id,
            message_id=message.message_id,
            reply_markup=markup
        )

def save_product(message, category_id):
    if message.from_user.id in ADMIN_IDS:
        if message.content_type != 'photo':
            bot.send_message(message.chat.id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞!")
            return

        name, description = message.caption.split('\n', 1) if '\n' in message.caption else (message.caption, '')

        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        photo_path = f'products/product_{datetime.now().strftime("%Y%m%d_%H%M%S")}.jpg'

        os.makedirs('products', exist_ok=True)
        with open(photo_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute("INSERT INTO products (category_id, name, description, photo) VALUES (?, ?, ?, ?)",
                 (category_id, name, description, photo_path))
        conn.commit()
        conn.close()

        bot.send_message(message.chat.id, f"–¢–æ–≤–∞—Ä '{name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
        manage_shop(message)

def delete_category_confirm(message, category_id):
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("SELECT name FROM categories WHERE id = ?", (category_id,))
    category_name = c.fetchone()[0]
    c.execute("SELECT COUNT(*) FROM products WHERE category_id = ?", (category_id,))
    products_count = c.fetchone()[0]
    conn.close()

    if products_count > 0:
        bot.send_message(message.chat.id, f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}', —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–µ–π –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã ({products_count})!")
        manage_shop(message)
        return

    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("DELETE FROM categories WHERE id = ?", (category_id,))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–¥–∞–ª–µ–Ω–∞!")
    manage_shop(message)

def show_products_for_deletion(message, category_id):
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("SELECT * FROM products WHERE category_id = ?", (category_id,))
    products = c.fetchall()
    conn.close()

    if not products:
        bot.send_message(message.chat.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤!")
        manage_shop(message)
        return

    markup = types.InlineKeyboardMarkup()
    for product in products:
        markup.add(types.InlineKeyboardButton(product[2], callback_data=f"del_prod_{product[0]}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

def delete_product_confirm(message, product_id):
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("SELECT name, photo FROM products WHERE id = ?", (product_id,))
    product = c.fetchone()
    c.execute("DELETE FROM products WHERE id = ?", (product_id,))
    conn.commit()
    conn.close()

    if os.path.exists(product[1]):
        os.remove(product[1])

    bot.send_message(message.chat.id, f"–¢–æ–≤–∞—Ä '{product[0]}' —É–¥–∞–ª–µ–Ω!")
    manage_shop(message)

def start_reply_process(message, question_id):
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("SELECT * FROM questions WHERE id = ?", (question_id,))
    question = c.fetchone()
    conn.close()

    if question[4] == 'text':
        bot.send_message(message.chat.id, f"–í–æ–ø—Ä–æ—Å –æ—Ç @{question[2]} (ID: {question[1]}):\n{question[3]}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
    elif question[4] == 'photo':
        bot.send_photo(message.chat.id, question[5], 
                      caption=f"–í–æ–ø—Ä–æ—Å –æ—Ç @{question[2]} (ID: {question[1]}):\n{question[3]}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
    elif question[4] == 'document':
        bot.send_document(message.chat.id, question[5],
                         caption=f"–í–æ–ø—Ä–æ—Å –æ—Ç @{question[2]} (ID: {question[1]}):\n{question[3]}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç:")

    bot.register_next_step_handler(message, lambda msg: send_reply(msg, question_id, question[1]))

def send_reply(message, question_id, user_id):
    if message.from_user.id in ADMIN_IDS:
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()

        if message.content_type == 'text':
            bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")
        elif message.content_type == 'photo':
            bot.send_photo(user_id, message.photo[-1].file_id,
                          caption=f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.caption or ''}")
        elif message.content_type == 'document':
            bot.send_document(user_id, message.document.file_id,
                            caption=f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.caption or ''}")

        c.execute("UPDATE questions SET status = 'answered' WHERE id = ?", (question_id,))
        conn.commit()
        conn.close()

        bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        admin_panel(message)

def start_order(call, product_id):
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("SELECT name FROM products WHERE id = ?", (product_id,))
    product_name = c.fetchone()[0]
    conn.close()

    markup = types.InlineKeyboardMarkup(row_width=5)
    for i in range(1, 6):
        markup.add(types.InlineKeyboardButton(str(i), callback_data=f"order_qty_{product_id}_{i}"))
    bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ '{product_name}':", 
                         chat_id=call.message.chat.id, 
                         message_id=call.message.message_id, 
                         reply_markup=markup)

def confirm_order_quantity(message, product_id, quantity):
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("SELECT name FROM products WHERE id = ?", (product_id,))
    product_name = c.fetchone()[0]
    conn.close()

    markup = types.InlineKeyboardMarkup()
    confirm_btn = types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order_confirm_{product_id}_{quantity}")
    markup.add(confirm_btn)

    bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ '{product_name}' –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} —à—Ç. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:",
                         chat_id=message.chat.id, message_id=message.message_id, reply_markup=markup)

def request_delivery_address(message, product_id, quantity):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    bot.register_next_step_handler(msg, lambda m: finalize_order(m, product_id, quantity))

def finalize_order(message, product_id, quantity):
    user_id = message.from_user.id
    username = message.from_user.username
    address = message.text

    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("SELECT name FROM products WHERE id = ?", (product_id,))
    product_name = c.fetchone()[0]
    c.execute("INSERT INTO orders (user_id, username, product_id, product_name, quantity, address, timestamp) VALUES (?, ?, ?, ?, ?, ?, ?)",
             (user_id, username, product_id, product_name, quantity, address, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    order_id = c.lastrowid
    c.execute("UPDATE users SET orders_count = orders_count + 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω! –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–∏–º.")

    order_info = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n–û—Ç: @{username} (ID: {user_id})\n–¢–æ–≤–∞—Ä: {product_name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n–ê–¥—Ä–µ—Å: {address}"
    for admin_id in ADMIN_IDS:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data=f"pay_{order_id}"))
        bot.send_message(admin_id, order_info, reply_markup=markup)

def show_order_details(message, order_id):
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("SELECT * FROM orders WHERE id = ?", (order_id,))
    order = c.fetchone()
    conn.close()

    order_info = (f"–ó–∞–∫–∞–∑ #{order[0]}\n"
                  f"–û—Ç: @{order[2]} (ID: {order[1]})\n"
                  f"–¢–æ–≤–∞—Ä: {order[4]}\n"
                  f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order[5]} —à—Ç.\n"
                  f"–ê–¥—Ä–µ—Å: {order[6]}\n"
                  f"–°—Ç–∞—Ç—É—Å: {order[7]}\n"
                  f"–í—Ä–µ–º—è: {order[8]}")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data=f"pay_{order_id}"))
    bot.edit_message_text(order_info, chat_id=message.chat.id, message_id=message.message_id, reply_markup=markup)

def send_payment_details(message, order_id):
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("SELECT user_id FROM orders WHERE id = ?", (order_id,))
    user_id = c.fetchone()[0]
    conn.close()

    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç—É:")
    bot.register_next_step_handler(msg, lambda m: send_payment_to_user(m, user_id, order_id))

def send_payment_to_user(message, user_id, order_id):
    if message.from_user.id in ADMIN_IDS:
        if message.content_type == 'text':
            bot.send_message(user_id, f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id}:\n\n{message.text}")
        elif message.content_type == 'photo':
            bot.send_photo(user_id, message.photo[-1].file_id,
                          caption=f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id}:\n\n{message.caption or ''}")

        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute("UPDATE orders SET status = 'awaiting_payment' WHERE id = ?", (order_id,))
        conn.commit()
        conn.close()

        bot.send_message(message.chat.id, "–†–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É!")
        manage_orders(message)


# ... (–æ—Å—Ç–∞–≤—å—Ç–µ –≤–µ—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
def get_ai_response(prompt):
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        with open("knowledge_base.txt", "r", encoding="utf-8") as f:
            knowledge_base = f.read()
        
        system_prompt = (
            "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤–µ–∂–ª–∏–≤–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ. "
            "–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ:\n\n"
            f"{knowledge_base}\n\n"
            "–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ, –æ—Ç–≤–µ—á–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π."
        )
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
@bot.message_handler(func=lambda message: message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
def ask_question(message):
    msg = bot.send_message(message.chat.id, 
                           "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:", 
                           reply_markup=get_question_type_keyboard())
    bot.register_next_step_handler(msg, process_question)

def get_question_type_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å")
    btn2 = types.KeyboardButton("–í–æ–ø—Ä–æ—Å –ø–æ —Ç–æ–≤–∞—Ä—É")
    btn3 = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
    markup.add(btn1, btn2, btn3)
    return markup

def process_question(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        start(message)
        return
    
    question_type = message.text
    msg = bot.send_message(message.chat.id, 
                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
    bot.register_next_step_handler(msg, lambda m: handle_question(m, question_type))

def handle_question(message, question_type):
    user_id = message.from_user.id
    username = message.from_user.username
    user_question = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    ai_response = get_ai_response(user_question)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("INSERT INTO questions (user_id, username, question_text, question_type, timestamp) VALUES (?, ?, ?, ?, ?)",
              (user_id, username, user_question, question_type, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    conn.commit()
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, ai_response)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for admin_id in ADMIN_IDS:
        bot.send_message(admin_id, 
                         f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{username} (ID: {user_id}) [{question_type}]:\n{user_question}\n\n–û—Ç–≤–µ—Ç –ò–ò:\n{ai_response}")

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ —Å —É—á–∞—Å—Ç–∏–µ–º –ò–ò
@bot.callback_query_handler(func=lambda call: call.data.startswith('order_'))
def handle_order(call):
    parts = call.data.split('_')
    if len(parts) == 2:  # –ù–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞
        product_id = int(parts[1])
        start_order_with_ai(call, product_id)
    elif parts[1] == 'qty':  # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        product_id, quantity = map(int, parts[2:])
        confirm_order_quantity_with_ai(call.message, product_id, quantity)
    elif parts[1] == 'confirm':  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        product_id, quantity = map(int, parts[2:])
        request_delivery_address_with_ai(call.message, product_id, quantity)

def start_order_with_ai(call, product_id):
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("SELECT name FROM products WHERE id = ?", (product_id,))
    product_name = c.fetchone()[0]
    conn.close()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ò–ò –∫–∞–∫ –ª—É—á—à–µ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏
    ai_response = get_ai_response(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å {product_name}. –ö–∞–∫ –ª—É—á—à–µ —É—Ç–æ—á–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ?")
    
    markup = types.InlineKeyboardMarkup(row_width=5)
    for i in range(1, 6):
        markup.add(types.InlineKeyboardButton(str(i), callback_data=f"order_qty_{product_id}_{i}"))
    
    bot.edit_message_text(ai_response,
                          chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          reply_markup=markup)

def confirm_order_quantity_with_ai(message, product_id, quantity):
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("SELECT name FROM products WHERE id = ?", (product_id,))
    product_name = c.fetchone()[0]
    conn.close()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ò–ò –∫–∞–∫ –ª—É—á—à–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
    ai_response = get_ai_response(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª {quantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞ {product_name}. –ö–∞–∫ –ª—É—á—à–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?")
    
    markup = types.InlineKeyboardMarkup()
    confirm_btn = types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order_confirm_{product_id}_{quantity}")
    markup.add(confirm_btn)
    
    bot.edit_message_text(ai_response,
                          chat_id=message.chat.id,
                          message_id=message.message_id,
                          reply_markup=markup)

def request_delivery_address_with_ai(message, product_id, quantity):
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("SELECT name FROM products WHERE id = ?", (product_id,))
    product_name = c.fetchone()[0]
    conn.close()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ò–ò –∫–∞–∫ –ª—É—á—à–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∞–¥—Ä–µ—Å
    ai_response = get_ai_response(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–∞–∑–∞–ª {quantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞ {product_name}. –ö–∞–∫ –ª—É—á—à–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏?")
    
    msg = bot.send_message(message.chat.id, ai_response)
    bot.register_next_step_handler(msg, lambda m: finalize_order_with_ai(m, product_id, quantity))

def finalize_order_with_ai(message, product_id, quantity):
    user_id = message.from_user.id
    username = message.from_user.username
    address = message.text
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    c.execute("SELECT name FROM products WHERE id = ?", (product_id,))
    product_name = c.fetchone()[0]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    c.execute("INSERT INTO orders (user_id, username, product_id, product_name, quantity, address, timestamp) VALUES (?, ?, ?, ?, ?, ?, ?)",
             (user_id, username, product_id, product_name, quantity, address, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    order_id = c.lastrowid
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute("UPDATE users SET orders_count = orders_count + 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ò–ò –∫–∞–∫ –ª—É—á—à–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order_summary = (
        f"–í–∞—à –∑–∞–∫–∞–∑:\n"
        f"–¢–æ–≤–∞—Ä: {product_name}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
        f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}"
    )
    ai_response = get_ai_response(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∑–∞–∫–∞–∑:\n{order_summary}")
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–î–∞")
    btn2 = types.KeyboardButton("–ù–µ—Ç")
    markup.add(btn1, btn2)
    
    msg = bot.send_message(message.chat.id, ai_response, reply_markup=markup)
    bot.register_next_step_handler(msg, lambda m: confirm_final_order(m, order_id, order_summary))

def confirm_final_order(message, order_id, order_summary):
    if message.text.lower() == "–¥–∞":
        user_id = message.from_user.id
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in ADMIN_IDS:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data=f"pay_{order_id}"))
            bot.send_message(admin_id, f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n{order_summary}", reply_markup=markup)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ò–ò –∫–∞–∫ –ª—É—á—à–µ —Å–æ–æ–±—â–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        payment_info = get_ai_response("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞")
        bot.send_message(message.chat.id, payment_info)
        
    else:
        bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã
@bot.message_handler(func=lambda message: "–æ–ø–ª–∞—Ç–∏–ª" in message.text.lower())
def process_payment(message):
    user_id = message.from_user.id
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ò–ò –∫–∞–∫ –ª—É—á—à–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É
    confirmation_message = get_ai_response("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for admin_id in ADMIN_IDS:
        bot.send_message(admin_id, 
                         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} (ID: {user_id}) —Å–æ–æ–±—â–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ.\n\n{confirmation_message}")
    
    bot.send_message(message.chat.id, confirmation_message)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(none_stop=True)
